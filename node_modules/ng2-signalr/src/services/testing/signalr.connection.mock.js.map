{"version":3,"file":"signalr.connection.mock.js","sourceRoot":"","sources":["../../../../src/services/testing/signalr.connection.mock.ts"],"names":[],"mappings":";;;;AAEA,OAAO,EAAE,sBAAsB,EAAE,MAAM,sCAAsC,CAAC;;;;;;;;;;AAQ9E,IAAA;IACI,+BACY,cACA,cACA;QAFA,iBAAY,GAAZ,YAAY;QACZ,iBAAY,GAAZ,YAAY;QACZ,eAAU,GAAV,UAAU;KACrB;IAED,sBAAI,yCAAM;;;;QAAV;YACI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;SAC5B;;;OAAA;IAED,sBAAI,yCAAM;;;;QAAV;YACI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;SAC3C;;;OAAA;IAED,sBAAI,qCAAE;;;;QAAN;YACI,MAAM,CAAC,8BAA8B,CAAC;SACzC;;;OAAA;;;;IAEM,oCAAI;;;;;;;;;IAIJ,qCAAK;;;;QACR,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;;;;;;IAG1B,sCAAM;;;;;cAAC,MAAc;QAAE,oBAAoB;aAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;YAApB,mCAAoB;;QAC9C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;;;;;;IAG1B,sCAAM;;;;;cAAI,QAAmC;QAChD,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;;;;;;;IAGxC,yCAAS;;;;;cAAI,KAAa;QAC7B,qBAAM,QAAQ,GAAG,IAAI,sBAAsB,CAAI,KAAK,CAAC,CAAC;QACtD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACtB,MAAM,CAAC,QAAQ,CAAC;;;;;;IAGb,4CAAY;;;;cAAC,KAAa;QAC7B,qBAAM,QAAQ,GAAG,IAAI,sBAAsB,CAAQ,KAAK,CAAC,CAAC;QAC1D,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;QAC3C,MAAM,CAAC,QAAQ,CAAC;;gCAtDxB;IAwDC,CAAA;AA9CD,iCA8CC","sourcesContent":["import { Observable, AsyncSubject, ReplaySubject, Subject } from 'rxjs';\r\nimport { SignalRConfiguration } from '../signalr.configuration';\r\nimport { BroadcastEventListener } from '../eventing/broadcast.event.listener';\r\nimport { ConnectionStatus } from '../connection/connection.status';\r\nimport { ISignalRConnection } from '../connection/i.signalr.connection';\r\n\r\nexport interface IListenerCollection {\r\n    [name: string]: BroadcastEventListener<any>;\r\n}\r\n\r\nexport class SignalRConnectionMock implements ISignalRConnection {\r\n    constructor(\r\n        private _mockErrors$: Subject<any>,\r\n        private _mockStatus$: Subject<ConnectionStatus>,\r\n        private _listeners: IListenerCollection) {\r\n    }\r\n\r\n    get errors(): Observable<any> {\r\n        return this._mockErrors$;\r\n    }\r\n\r\n    get status(): Observable<ConnectionStatus> {\r\n        return this._mockStatus$.asObservable();\r\n    }\r\n\r\n    get id(): string {\r\n        return 'xxxxxxxx-xxxx-xxxx-xxxxxxxxx';\r\n    }\r\n\r\n    public stop(): void {\r\n        //\r\n    }\r\n\r\n    public start(): Promise<any> {\r\n        return Promise.resolve(null); // TODO: implement\r\n    }\r\n\r\n    public invoke(method: string, ...parameters: any[]): Promise<any> {\r\n        return Promise.resolve(null);\r\n    }\r\n\r\n    public listen<T>(listener: BroadcastEventListener<T>): void {\r\n        this._listeners[listener.event] = listener;\r\n    }\r\n\r\n    public listenFor<T>(event: string): BroadcastEventListener<T> {\r\n        const listener = new BroadcastEventListener<T>(event);\r\n        this.listen(listener);\r\n        return listener;\r\n    }\r\n\r\n    public listenForRaw(event: string): BroadcastEventListener<any[]> {\r\n        const listener = new BroadcastEventListener<any[]>(event);\r\n        this._listeners[listener.event] = listener;\r\n        return listener;\r\n    }\r\n}\r\n"]}