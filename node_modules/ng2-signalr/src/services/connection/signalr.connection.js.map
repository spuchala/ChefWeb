{"version":3,"file":"signalr.connection.js","sourceRoot":"","sources":["../../../../src/services/connection/signalr.connection.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISignalRConnection } from './i.signalr.connection';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { BroadcastEventListener } from '../eventing/broadcast.event.listener';\r\nimport { ConnectionStatus } from './connection.status';\r\nimport { NgZone } from '@angular/core';\r\nimport { SignalRConfiguration } from '../signalr.configuration';\r\nimport { ConnectionTransport } from './connection.transport';\r\n\r\nexport declare type CallbackFn = (...args: any[]) => void;\r\n\r\nexport class SignalRConnection implements ISignalRConnection {\r\n    private _status: Observable<ConnectionStatus>;\r\n    private _errors: Observable<any>;\r\n    private _jConnection: any;\r\n    private _jProxy: any;\r\n    private _zone: NgZone;\r\n    private _configuration: SignalRConfiguration;\r\n    private _listeners: { [eventName: string]: CallbackFn[] };\r\n\r\n    constructor(jConnection: any, jProxy: any, zone: NgZone, configuration: SignalRConfiguration) {\r\n        this._jProxy = jProxy;\r\n        this._jConnection = jConnection;\r\n        this._zone = zone;\r\n        this._errors = this.wireUpErrorsAsObservable();\r\n        this._status = this.wireUpStatusEventsAsObservable();\r\n        this._configuration = configuration;\r\n        this._listeners = {};\r\n    }\r\n\r\n    public get errors(): Observable<any> {\r\n        return this._errors;\r\n    }\r\n\r\n    public get status(): Observable<ConnectionStatus> {\r\n        return this._status;\r\n    }\r\n\r\n    public start(): Promise<ISignalRConnection> {\r\n\r\n        const jTransports = this.convertTransports(this._configuration.transport);\r\n\r\n        const $promise = new Promise<ISignalRConnection>((resolve, reject) => {\r\n            this._jConnection\r\n                .start({\r\n                    jsonp: this._configuration.jsonp,\r\n                    pingInterval: this._configuration.pingInterval,\r\n                    transport: jTransports,\r\n                    withCredentials: this._configuration.withCredentials,\r\n                })\r\n                .done(() => {\r\n                    console.log('Connection established, ID: ' + this._jConnection.id);\r\n                    console.log('Connection established, Transport: ' + this._jConnection.transport.name);\r\n                    resolve(this);\r\n                })\r\n                .fail((error: any) => {\r\n                    console.log('Could not connect');\r\n                    reject('Failed to connect. Error: ' + error.message); // ex: Error during negotiation request.\r\n                });\r\n        });\r\n        return $promise;\r\n    }\r\n\r\n    public stop(): void {\r\n        this._jConnection.stop();\r\n    }\r\n\r\n    public get id(): string {\r\n        return this._jConnection.id;\r\n    }\r\n\r\n    public invoke(method: string, ...parameters: any[]): Promise<any> {\r\n        if (method == null) {\r\n            throw new Error('SignalRConnection: Failed to invoke. Argument \\'method\\' can not be null');\r\n        }\r\n        this.log(`SignalRConnection. Start invoking \\'${method}\\'...`);\r\n\r\n        const $promise = new Promise<any>((resolve, reject) => {\r\n            this._jProxy.invoke(method, ...parameters)\r\n                .done((result: any) => {\r\n                    this.log(`\\'${method}\\' invoked succesfully. Resolving promise...`);\r\n                    resolve(result);\r\n                    this.log(`Promise resolved.`);\r\n                })\r\n                .fail((err: any) => {\r\n                    console.log(`Invoking \\'${method}\\' failed. Rejecting promise...`);\r\n                    reject(err);\r\n                    console.log(`Promise rejected.`);\r\n                });\r\n        });\r\n        return $promise;\r\n    }\r\n\r\n    public listen<T>(listener: BroadcastEventListener<T>): void {\r\n        if (listener == null) {\r\n            throw new Error('Failed to listen. Argument \\'listener\\' can not be null');\r\n        }\r\n\r\n        const callback: CallbackFn = (...args: any[]) => {\r\n            this.run(() => {\r\n                let casted: T = null;\r\n                if (args.length > 0) {\r\n                    casted = args[0] as T;\r\n                }\r\n                this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\r\n                listener.next(casted);\r\n                this.log('listener next() called.');\r\n            }, this._configuration.executeEventsInZone);\r\n        };\r\n\r\n        this.setListener(callback, listener);\r\n    }\r\n\r\n    public stopListening<T>(listener: BroadcastEventListener<T>): void {\r\n        if (listener == null) {\r\n            throw new Error('Failed to listen. Argument \\'listener\\' can not be null');\r\n        }\r\n\r\n        this.log(`SignalRConnection: Stopping listening to server event with name ${listener.event}`);\r\n        if (!this._listeners[listener.event]) {\r\n            this._listeners[listener.event] = [];\r\n        }\r\n\r\n        for (const callback of this._listeners[listener.event]) {\r\n            this._jProxy.off(listener.event, callback);\r\n        }\r\n\r\n        this._listeners[listener.event] = [];\r\n    }\r\n\r\n    public listenFor<T>(event: string): BroadcastEventListener<T> {\r\n        if (event == null || event === '') {\r\n            throw new Error('Failed to listen. Argument \\'event\\' can not be empty');\r\n        }\r\n\r\n        const listener = new BroadcastEventListener<T>(event);\r\n\r\n        this.listen(listener);\r\n\r\n        return listener;\r\n    }\r\n\r\n    public listenForRaw(event: string): BroadcastEventListener<any[]> {\r\n        if (event == null || event === '') {\r\n            throw new Error('Failed to listen. Argument \\'event\\' can not be empty');\r\n        }\r\n\r\n        const listener = new BroadcastEventListener<any[]>(event);\r\n\r\n        const callback: CallbackFn = (...args: any[]) => {\r\n            this.run(() => {\r\n                let casted: any[] = [];\r\n                if (args.length > 0) {\r\n                    casted = args;\r\n                }\r\n                this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\r\n                listener.next(args);\r\n                this.log('listener next() called.');\r\n            }, this._configuration.executeEventsInZone);\r\n        };\r\n\r\n        this.setListener(callback, listener);\r\n        return listener;\r\n    }\r\n\r\n    private setListener<T>(callback: CallbackFn, listener: BroadcastEventListener<T>) {\r\n        this.log(`SignalRConnection: Starting to listen to server event with name ${listener.event}`);\r\n        this._jProxy.on(listener.event, callback);\r\n\r\n        if (this._listeners[listener.event] == null) {\r\n            this._listeners[listener.event] = [];\r\n        }\r\n\r\n        this._listeners[listener.event].push(callback);\r\n    }\r\n\r\n    private convertTransports(transports: ConnectionTransport | ConnectionTransport[]): any {\r\n        if (transports instanceof Array) {\r\n            return transports.map((t: ConnectionTransport) => t.name);\r\n        }\r\n        return transports.name;\r\n    }\r\n\r\n    private wireUpErrorsAsObservable(): Observable<any> {\r\n        const sError = new Subject<any>();\r\n\r\n        this._jConnection.error((error: any) => {\r\n            this.run(() => sError.next(error), this._configuration.executeErrorsInZone);\r\n        });\r\n        return sError;\r\n    }\r\n\r\n    private wireUpStatusEventsAsObservable(): Observable<ConnectionStatus> {\r\n        const sStatus = new Subject<ConnectionStatus>();\r\n        // aggregate all signalr connection status handlers into 1 observable.\r\n        // handler wire up, for signalr connection status callback.\r\n        this._jConnection.stateChanged((change: any) => {\r\n            this.run(() => sStatus.next(new ConnectionStatus(change.newState)),\r\n                this._configuration.executeStatusChangeInZone);\r\n        });\r\n        return sStatus.asObservable();\r\n    }\r\n\r\n    private onBroadcastEventReceived<T>(listener: BroadcastEventListener<T>, ...args: any[]) {\r\n        this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\r\n\r\n        let casted: T = null;\r\n        if (args.length > 0) {\r\n            casted = args[0] as T;\r\n        }\r\n\r\n        this.run(() => {\r\n            listener.next(casted);\r\n        }, this._configuration.executeEventsInZone);\r\n\r\n        this.log('listener next() called.');\r\n    }\r\n\r\n    private log(...args: any[]) {\r\n        if (this._jConnection.logging === false) {\r\n            return;\r\n        }\r\n        console.log(args.join(', '));\r\n    }\r\n\r\n    private run(func: () => void, inZone: boolean) {\r\n        if (inZone) {\r\n            this._zone.run(() => func());\r\n        } else {\r\n            this._zone.runOutsideAngular(() => func());\r\n        }\r\n    }\r\n}\r\n"]}